using DOTRModder.MapRelated;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;


namespace DOTRModder
{

    //Just Enable or disable no Customisation
    public enum SimpleModBools
    {
        Exp,
        AIInputFix,
        RemoveSlotRng,
        ExpandZoom,
        AllFusions,
        AllCustomDuels,
        MakoTheme,
        ExtraSlotRewards,
        FastIntro,
        UseCustomMaps,
    }

    //Just Enable or disable no Customisation
    public enum ModBoolsIntPair
    {
        LPCap,
        Reincarnation,
        ForceStartTeam,
        FirstTurnTeam,
        TerrainBuff,
    }
    internal static class Main
    {
        

        static Process pcsx2;
        static ProcessModule module;
        static IntPtr baseAddress;
        static IntPtr hproc;
        static IntPtr HasDotrStartedPtr = 0x201000d0;
        static IntPtr hasLoadedModPtr = 0X2035fdfc;
        static bool hasModLoaded = false;
        static byte[] startUpBytes = { 0xf0, 0xff, 0xbd, 0x27 };
        static Form1? form1;
        static public event Action<string> ProgressUpdate;


        public delegate void ModList(); 
        static public ModList modListSimple;

        public delegate void ModListWithInt(int value);
        static public Action<int> modListWithInt;

        private static Dictionary<ModBoolsIntPair, Action> delegateFunctions = new Dictionary<ModBoolsIntPair, Action>();

        static int[] SlotInputs = Enumerable.Repeat(671, 30).ToArray();
        static int[] SlotRewards = Enumerable.Repeat(0, 30).ToArray();


        #region Modding Variables
        //Maps Editing
        static IntPtr MapInfo = 0x202CEE5C;
        // QOL ToDoMaybe fix movement issue for field fusions
        static IntPtr ChangeReincarnationAmountPtr = 0x20228190;
        static IntPtr SetoMainAINop = 0x20117ca0; //Make seto only pass
        static IntPtr SetoMainAIReturn = 0x20117e40;
        static IntPtr LockTeamSelection = 0x2021c6f0; // lock the selection options
        static IntPtr LockTeamSelection2 = 0x2021c6d8;
        static IntPtr SelectWhiteDefault = 0x2021f160;
        static IntPtr MakeWhiteStart = 0x201a8f74; //Makes white always start
        static IntPtr AllowRitualFusionsHand = 0x2026e694; //Allows non enchant fusions in hand
        static IntPtr AllowRitualFusionField = 0x20247fa4; //Allows non enchant fusions on field
        static IntPtr RemoveRngFromSlots = 0x202511b4;
        static IntPtr ExpandZoom = 0x201d2c00;
        static IntPtr NerfTerrain = 0x20266490;

        // Fusions
        static IntPtr FusionListBytePtr = 0x2029E830;
        static IntPtr FusionListByteLength = 26540 * 4;
        
        // Music
        static IntPtr AddMakosThemeToMako = 0X201aab68; // Play makos theme during Mako battle
        static IntPtr BgmJumpFix1 = 0x201aab60;
        static IntPtr BgmJumpFix2 = 0x201aab14;
        static IntPtr BgmJumpFix3 = 0x201aab40;
        static IntPtr BgmJumpFix4 = 0x201aab50;
        static IntPtr ChangeBgmAddressTable1 = 0x202be6d0;
        static IntPtr ChangeBgmAddressTable2 = 0x202be710;

        //FastIntro
        static IntPtr FastIntroName1 = 0x2021e53c;
        static IntPtr FastIntroName2 = 0x2021e860;
        static IntPtr FastIntroDeckLeader = 0x2021eb98;
        static IntPtr FastIntroDeckLeader2 = 0x2021eaf8;

        static IntPtr FastIntroPostDeckLeader1 = 0x2021eef4;
        static IntPtr FastIntroPostDeckLeader2 = 0x2021ef44;

        static IntPtr FastIntroChooseSides1 = 0x2021f280;
        static IntPtr FastIntroChooseSides2 = 0x2021ef54;

        static IntPtr FastIntroSkipSeto1 = 0x20221ed0;
        static IntPtr FastIntroSkipSeto2 = 0x20221ee4;

        static IntPtr FastIntroSkipToBoat = 0x2021f3e4;

        static IntPtr FastIntroSkipYugi1 = 0x2021f7c8;
        static IntPtr FastIntroSkipYugi2 = 0x2021f624;

        //Remove negetive exp
        static IntPtr negExpDelUnit = 0x2024f38c;
        static IntPtr negExpDelUnit2 = 0x2024f404;

        static IntPtr negExpDelUnit2_1 = 0x2024f460;
        static IntPtr negExpDelUnit2_2 = 0x2024f4e4;

        static IntPtr negExpAtkLeader = 0x20274558;

        static IntPtr negExpDuelEnd1 = 0x20273368;
        static IntPtr negExpDuelEnd2 = 0x202731c8;
        static IntPtr negExpDuelEnd3 = 0x20273028;
        static IntPtr negExpDuelEnd4 = 0x20272e88;



        //Make space for more specific 3 in a row rares
        static IntPtr AddSlotRewardsPtr = 0x20251510;

        //Allow 5 digits for LP
        static IntPtr MoreDigitsOnScreen = 0x201b1bd0;

        // Remove going to each unit when they arent going to be moved
        static IntPtr improveAIInputOrig = 0x2027646c;
        static IntPtr improveAIInputDest = 0x20360100;

        //Probably wont use but good to know
        static IntPtr ExpandSelectionRange = 0x201d2c94;
        static IntPtr ExpandSelectionRange2 = 0x201d2cdc;
        //Mem.PatchEx(ExpandSelectionRange, "\x0a\x00\x42\x28 ", 4);
        //Mem.PatchEx(ExpandSelectionRange2, "\x0a\x00\x42\x28", 4);
        #endregion
        public static  void UpdateDisplayText(string text)
        {
            ProgressUpdate?.Invoke(text);
        }
        public static void Preload()
        {
            Form1.UpdateSimpleBoolCheckbox += HandleSimpleCheckBoxes;
            Form1.UpdateBoolAndIntCheckbox += HandleBoolAndIntCheckbox;
            Form1.SaveSlots += HandleSlotsSaved;
        }

        private static void HandleSlotsSaved(int[] inputs, int[] rewards)
        {
            SlotInputs = inputs;
            SlotRewards = rewards;
        }

        public static void Init(Process process,Form1 form)
        {
            form1 = form;
            pcsx2 = process;
            
            if (process.MainModule != null)
            {
                
                hproc = Mem.OpenProcess((uint)Mem.ProcessAccessFlags.All, false, (uint)pcsx2.Id);
                Mod();


                

            }
            else
            {
                return;
            }
           

        }

        static void HandleSimpleCheckBoxes(SimpleModBools name, bool enabled)
        {
            switch (name)
            {
                case SimpleModBools.Exp:
                    if (enabled)
                    {
                        modListSimple += PatchNegetiveExpPatch;
                    }
                    else
                    {
                        modListSimple -= PatchNegetiveExpPatch;
                    }

                    break;
                case SimpleModBools.AIInputFix:
                    if (enabled)
                    {
                        modListSimple += AIPassInsteadOfPressX;
                    }
                    else
                    {
                        modListSimple -= AIPassInsteadOfPressX;
                    }
                    break;
                case SimpleModBools.RemoveSlotRng:
                    if (enabled)
                    {
                        modListSimple += RemoveSlotsRng;
                    }
                    else
                    {
                        modListSimple -= RemoveSlotsRng;
                    }
                    break;
                case SimpleModBools.ExpandZoom:
                    if (enabled)
                    {
                        modListSimple += AllowExpandedZoom;
                    }
                    else
                    {
                        modListSimple -= AllowExpandedZoom;
                    }
                    break;
                case SimpleModBools.AllFusions:
                    if (enabled)
                    {
                        modListSimple += AllowNonMonsterFusions;
                    }
                    else
                    {
                        modListSimple -= AllowNonMonsterFusions;
                    }
                    break;
                case SimpleModBools.AllCustomDuels:
                    if (enabled)
                    {
                        modListSimple += AllowAllCustomDuels;
                    }
                    else
                    {
                        modListSimple -= AllowAllCustomDuels;
                    }
                    break;
                case SimpleModBools.MakoTheme:
                    if (enabled)
                    {
                        modListSimple += ChangeMakosTheme;
                    }
                    else
                    {
                        modListSimple -= ChangeMakosTheme;
                    }
                    break;
                case SimpleModBools.ExtraSlotRewards:
                    if (enabled)
                    {
                        modListSimple += AddSlotRewards;
                    }
                    else
                    {
                        modListSimple -= AddSlotRewards;
                    }
                    break;
                case SimpleModBools.FastIntro:
                    if (enabled)
                    {
                        modListSimple += FastIntro;
                    }
                    else
                    {
                        modListSimple -= FastIntro;
                    }
                    break;
                case SimpleModBools.UseCustomMaps:
                    if (enabled)
                    {
                        modListSimple += UseCustomMaps;
                    }
                    else
                    {
                        modListSimple -= UseCustomMaps;
                    }
                    break;
            }
        }

       

        static bool enableSpecificTeamFirst;
        static void HandleBoolAndIntCheckbox(ModBoolsIntPair name, bool enabled, int value)
        {
            switch (name)
            {
                case ModBoolsIntPair.LPCap:
                    if (enabled)
                    {
                        delegateFunctions[name] = () => ChangeLPStatCap(value);
                    }
                    else
                    {
                        delegateFunctions.Remove(name);
                    }
                    break;
                case ModBoolsIntPair.Reincarnation:
                    if (enabled)
                    {
                        delegateFunctions[name] = () => ChangeReincarnationAmount(value);
                    }
                    else
                    {
                        delegateFunctions.Remove(name);
                    }
                    break;
                case ModBoolsIntPair.ForceStartTeam:
                    if (enabled)
                    {
                        delegateFunctions[name] = () => ForceNewGameStartTeam(value);
                    }
                    else
                    {
                        delegateFunctions.Remove(name);
                    }
                    break;
                case ModBoolsIntPair.FirstTurnTeam:
                    if (enabled)
                    {
                        delegateFunctions[name] = () => ForceTeamFirst(value);
                    }
                    else
                    {
                        delegateFunctions.Remove(name);
                    }
                    break;
                case ModBoolsIntPair.TerrainBuff:
                    if (enabled)
                    {
                        delegateFunctions[name] = () => ChangeTerrainStats(value);
                    }
                    else
                    {
                        delegateFunctions.Remove(name);
                    }
                    break;
            }
        }

        static  void ChangeReincarnationAmount(int amount)
        {
            //MessageBox.Show($"Reincarnation amount {amount}");
            byte insetedByte = Convert.ToByte(amount);
            byte[] bytes = { insetedByte, 0x00, 0xa5, 0x28 };
            Mem.PatchEx(ChangeReincarnationAmountPtr, bytes, bytes.Length,hproc);
            
        }
       

        static  void MakeSetoUseless()
        {
            Mem.NopMips(SetoMainAINop, 104, hproc);
            byte[] bytes = { 0x00, 0x08, 0x02, 0x24 };
            Mem.PatchEx(SetoMainAIReturn, bytes, bytes.Length, hproc);
        }

        static void PatchNegetiveExpPatch()
        {
           
            //From tossing monsters
            Mem.PatchEx(negExpDelUnit2_1, new byte[4] { 0x00, 0x00, 0x07, 0x24 }, 4,hproc);
            Mem.PatchEx(negExpDelUnit2_2, new byte[4] { 0x00, 0x00, 0x07, 0x24 }, 4,hproc);
            //From monsters being destroyed
            Mem.PatchEx(negExpDelUnit, new byte[4] { 0x00, 0x00, 0x07, 0x24 }, 4, hproc);
            Mem.PatchEx(negExpDelUnit2, new byte[4] { 0x00, 0x00, 0x07, 0x24 }, 4,hproc);
            //From End of game
            Mem.PatchEx(negExpDuelEnd1, new byte[172]{0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x2e,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x0a,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x0f,0x00,0x41,0x2a,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x1f,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x0f,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x01,0x00,0x04,0x24,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24}, 172, hproc);
            Mem.PatchEx(negExpDuelEnd2, new byte[172]{0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x96,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x0a,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x0f,0x00,0x41,0x2a,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x87,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x0f,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x01,0x00,0x04,0x24,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x78,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24}, 172, hproc);
            Mem.PatchEx(negExpDuelEnd3, new byte[172]{0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0xfe,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x0a,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x0f,0x00,0x41,0x2a,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0xef,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x0f,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x01,0x00,0x04,0x24,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0xe0,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24}, 172, hproc);
            Mem.PatchEx(negExpDuelEnd4, new byte[172]{0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x67,0x01,0x00,0x10,0x01,0x00,0x02,0x24,0x0a,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x0f,0x00,0x41,0x2a,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x57,0x01,0x00,0x10,0x00,0x00,0x00,0x00,0x0f,0x00,0x41,0x2a,0x0e,0x00,0x20,0x10,0x01,0x00,0x04,0x24,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24,0x28,0x2e,0x40,0x70,0x0b,0x20,0x10,0x00,0xc4,0x56,0x08,0x0c,0x28,0x36,0x00,0x70,0x48,0x01,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x24,0x0b,0x20,0x10,0x00,0x0c,0x84,0x07,0x0c,0x28,0x2e,0x00,0x70,0x01,0x00,0x04,0x24,0x00,0x00,0x07,0x24}, 172, hproc);
            //From Atk Deck Leader
            Mem.PatchEx(negExpAtkLeader, new byte[4]{0x00,0x00,0x07,0x24}, 4, hproc);
        }


        private static void FastIntro()
        {
            Mem.PatchEx(FastIntroName1, new byte[216] { 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x28, 0x36, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x24, 0x60, 0x5e, 0x08, 0x0c, 0x01, 0x00, 0x05, 0x24, 0xed, 0x01, 0x01, 0x3c, 0x40, 0x00, 0x20, 0xac, 0xed, 0x01, 0x01, 0x3c, 0x48, 0x00, 0x20, 0xac, 0xed, 0x01, 0x01, 0x3c, 0x4c, 0x00, 0x20, 0xac, 0x0b, 0x00, 0x04, 0x24, 0xed, 0x01, 0x01, 0x3c, 0x1c, 0x00, 0x24, 0xa4, 0x00, 0x00, 0x03, 0x24, 0x02, 0x00, 0x04, 0x24, 0x1a, 0x00, 0x23, 0xa4, 0xed, 0x01, 0x01, 0x3c, 0xb3, 0x53, 0x24, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0x62, 0x00, 0x20, 0xa0, 0x00, 0x10, 0x03, 0x24, 0xed, 0x01, 0x01, 0x3c, 0x64, 0x00, 0x23, 0xa4, 0xed, 0x01, 0x01, 0x3c, 0xa2, 0x53, 0x24, 0xa4, 0xed, 0x01, 0x01, 0x3c, 0xa4, 0x53, 0x23, 0xa4, 0xed, 0x01, 0x01, 0x3c, 0x7b, 0x53, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0x7d, 0x53, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0xb4, 0x53, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0xb5, 0x53, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0xa6, 0x53, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0xa7, 0x53, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0x6c, 0x54, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0x6d, 0x54, 0x20, 0xa0, 0xed, 0x01, 0x01, 0x3c, 0x05, 0x00, 0x02, 0x24, 0x08, 0x00, 0x03, 0x24, 0x38, 0x27, 0x05, 0x24, 0xc2, 0x00, 0x05, 0xa6, 0x2d, 0x13, 0x00, 0x10 }, 216,hproc);
            Mem.PatchEx(FastIntroName2, new byte[96] { 0xed, 0x01, 0x01, 0x3c, 0xa2, 0x53, 0x24, 0x84, 0x15, 0x00, 0x03, 0x24, 0x9c, 0x12, 0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x05, 0x24, 0xc4, 0x5d, 0x08, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x23, 0x00, 0x05, 0x24, 0xc4, 0x5d, 0x08, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xed, 0x01, 0x01, 0x3c, 0x06, 0x00, 0x03, 0x24, 0x6c, 0x53, 0x23, 0xa4, 0x0e, 0x00, 0x02, 0x24, 0x7b, 0x53, 0x22, 0xa4, 0x03, 0x00, 0x03, 0x24, 0xb3, 0x53, 0x23, 0xa0, 0x02, 0x00, 0x03, 0x24, 0x62, 0x00, 0x23, 0xa0, 0x19, 0x00, 0x04, 0x24, 0x60, 0x5e, 0x08, 0x0c, 0x01, 0x00, 0x05, 0x24, 0x88, 0x12, 0x00, 0x10 }, 96,hproc);
            Mem.PatchEx(FastIntroDeckLeader, new byte[8] { 0x00, 0x00, 0x00, 0x00, 0x56, 0x27, 0x05, 0x24 }, 8,hproc);
            Mem.PatchEx(FastIntroDeckLeader2, new byte[4] { 0x25, 0x00, 0x00, 0x10 }, 4, hproc);
            Mem.NopMips(FastIntroPostDeckLeader1, 1, hproc);
            Mem.PatchEx(FastIntroPostDeckLeader2, new byte[4] { 0x6a, 0x27, 0x05, 0x24 }, 4, hproc);
            Mem.NopMips(FastIntroChooseSides1, 1, hproc);
            Mem.PatchEx(FastIntroChooseSides2, new byte[12] { 0x02, 0x00, 0x05, 0x24, 0xe1, 0x10, 0x00, 0x10, 0x6c, 0x53, 0x25, 0xa4 }, 12, hproc);
            Mem.NopMips(FastIntroSkipSeto1, 1, hproc);
            Mem.NopMips(FastIntroSkipSeto2, 1, hproc);
            Mem.NopMips(FastIntroSkipToBoat, 1, hproc);
            Mem.NopMips(FastIntroSkipYugi1, 1, hproc);
            Mem.PatchEx(FastIntroSkipYugi2, new byte[4] { 0x05, 0x00, 0x03, 0x24 }, 4, hproc);

        }

        static void ForceNewGameStartTeam(int side)
        {
            

            //Loads team 1 into a1 register
            Mem.PatchEx(LockTeamSelection2, new byte[4] { 0x01, 0x00, 0x05, 0x24 }, 4, hproc);

            //Assigns has completed white side the value of a1
            
            //changes your selected menu options to 0/ yorkists
            //leave this out to auto select red
            if (side == 1)
            {
                Mem.PatchEx(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x25, 0xa2 }, 4, hproc);
                Mem.PatchEx(SelectWhiteDefault, new byte[4] { 0xa8, 0x53, 0x20, 0xa0 }, 4, hproc);
            }
            else
            {
                Mem.PatchEx(LockTeamSelection-4, new byte[4] { 0x01, 0x00, 0x25, 0xa2 }, 4, hproc);
            }
            
        }

  

        static void AllowExpandedZoom()
        {
            
            Mem.PatchEx(ExpandZoom, new byte[12] { 0x71, 0x02,  0x41, 0x28, 0x04, 0x00, 0x20, 0x50, 0x71, 0x02, 0x03, 0x24 }, 12, hproc);
        }

        static void ForceTeamFirst(int side)
        {
            byte sideByte = Convert.ToByte(side);
            //Makes White go first
            //Moves the first 7 instructions up 2 bytes to fill spares nops
            //Then the next two instructions(8th and 9th): first one loads 1 into s6, (change 0X,00,16,24 to change which team starts first)
            //Second one stores the value of s6 into s0 + 0xf92 which is TurnFirst variable
            Mem.PatchEx(MakeWhiteStart, new byte[36] {
                0x10, 0x28, 0x00, 0x00, 
                0x40, 0x79, 0x07, 0x0c, 
                0x01, 0x00, 0x04, 0x24, 
                0x3c, 0x01, 0x04, 0x8e, 
                0x40, 0x01, 0x05, 0x8e, 
                0x40, 0xb7, 0x06, 0x0c, 
                0x28, 0x36, 0x40, 0x72,
                sideByte, 0x00, 0x16, 0x24, 
                0x92, 0x0f, 0x16, 0xa2 }, 36, hproc);
        }

        static void AllowNonMonsterFusions()
        {
            
            //both hackily reverse if statement to allows fusions for any combination of cards that do not include equips.
            //(basically rewrites most of the function)
            Mem.PatchEx(AllowRitualFusionsHand,

                       new byte[696] { 0x02, 0x00, 0x06, 0x24, 0x00, 0x00, 0xe3, 0x92, 0x43, 0x21, 0x03, 0x00, 0x1e, 0x00, 0x86, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x90, 0x43, 0x19, 0x03, 0x00, 0x1a, 0x00, 0x66, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x72, 0x68, 0x25, 0x09, 0x0c, 0x28, 0x2e, 0x20, 0x72, 0xe7, 0x03, 0x03, 0x24, 0x0c, 0x00, 0x43, 0x14, 0x00, 0x22, 0x16, 0x00, 0x02, 0x00, 0x04, 0x24, 0x00, 0x12, 0x16, 0x00, 0x25, 0x18, 0x55, 0x00, 0x00, 0x00, 0x44, 0xae, 0x25, 0x10, 0x53, 0x00, 0x04, 0x00, 0x43, 0xae, 0x08, 0x00, 0x42, 0xae, 0xff, 0xff, 0x02, 0x24, 0x8b, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x40, 0xae, 0x00, 0x22, 0x16, 0x00, 0x00, 0x00, 0x40, 0xae, 0x25, 0x18, 0x95, 0x00, 0x04, 0x00, 0x43, 0xae, 0x25, 0x18, 0x93, 0x00, 0x08, 0x00, 0x43, 0xae, 0x0c, 0x00, 0x42, 0xae, 0x82, 0x00, 0x00, 0x10, 0x28, 0x16, 0x00, 0x70, 0x3c, 0x00, 0x80, 0x14, 0x02, 0x00, 0x03, 0x24, 0x00, 0x00, 0x43, 0x90, 0x02, 0x00, 0x02, 0x24, 0x43, 0x19, 0x03, 0x00, 0x04, 0x00, 0x62, 0x10, 0x28, 0x26, 0xc0, 0x72, 0x2c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x42, 0xae, 0x28, 0x26, 0xc0, 0x72, 0x28, 0x2e, 0xa0, 0x72, 0xf4, 0x23, 0x09, 0x0c, 0x28, 0x36, 0x20, 0x72, 0x0c, 0x00, 0x41, 0x04, 0x03, 0x1c, 0x02, 0x00, 0x02, 0x00, 0x04, 0x24, 0x00, 0x12, 0x16, 0x00, 0x25, 0x18, 0x55, 0x00, 0x00, 0x00, 0x44, 0xae, 0x25, 0x10, 0x53, 0x00, 0x04, 0x00, 0x43, 0xae, 0x08, 0x00, 0x42, 0xae, 0xff, 0xff, 0x02, 0x24, 0x69, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x40, 0xae, 0x03, 0x1c, 0x02, 0x00, 0x0c, 0x00, 0x60, 0x54, 0x00, 0x12, 0x16, 0x00, 0x00, 0x22, 0x16, 0x00, 0x00, 0x00, 0x40, 0xae, 0x25, 0x18, 0x95, 0x00, 0x04, 0x00, 0x43, 0xae, 0x25, 0x18, 0x93, 0x00, 0x08, 0x00, 0x43, 0xae, 0xff, 0xff, 0x42, 0x30, 0x0c, 0x00, 0x42, 0xae, 0x5c, 0x00, 0x00, 0x10, 0x28, 0x16, 0x00, 0x70, 0x00, 0x12, 0x16, 0x00, 0x25, 0x18, 0x55, 0x00, 0x25, 0x10, 0x53, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x25, 0x10, 0x62, 0x00, 0x01, 0x00, 0x03, 0x24, 0x00, 0x00, 0x43, 0xae, 0x50, 0x79, 0x07, 0x0c, 0x04, 0x00, 0x42, 0xae, 0x08, 0x00, 0x42, 0xae, 0x01, 0x00, 0x02, 0x24, 0x4f, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x51, 0xae, 0x00, 0x00, 0x42, 0xae, 0x00, 0x1a, 0x16, 0x00, 0x25, 0x10, 0x75, 0x00, 0x04, 0x00, 0x42, 0xae, 0x25, 0x10, 0x73, 0x00, 0x08, 0x00, 0x42, 0xae, 0xff, 0xff, 0x02, 0x24, 0x46, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x40, 0xae, 0x02, 0x00, 0x03, 0x24, 0x3b, 0x00, 0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x90, 0x43, 0x11, 0x02, 0x00, 0x04, 0x00, 0x40, 0x10, 0x28, 0x26, 0x80, 0x72, 0x2d, 0x00, 0x00, 0x10, 0x00, 0x00, 0x43, 0xae, 0x28, 0x26, 0x80, 0x72, 0x28, 0x2e, 0x60, 0x72, 0xf4, 0x23, 0x09, 0x0c, 0x28, 0x36, 0x00, 0x72, 0x0c, 0x00, 0x41, 0x04, 0x03, 0x1c, 0x02, 0x00, 0x02, 0x00, 0x04, 0x24, 0x00, 0x12, 0x16, 0x00, 0x25, 0x18, 0x55, 0x00, 0x00, 0x00, 0x44, 0xae, 0x25, 0x10, 0x53, 0x00, 0x04, 0x00, 0x43, 0xae, 0x08, 0x00, 0x42, 0xae, 0xff, 0xff, 0x02, 0x24, 0x2d, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x40, 0xae, 0x03, 0x1c, 0x02, 0x00, 0x0c, 0x00, 0x60, 0x54, 0x00, 0x12, 0x16, 0x00, 0x00, 0x22, 0x16, 0x00, 0x00, 0x00, 0x40, 0xae, 0x25, 0x18, 0x95, 0x00, 0x04, 0x00, 0x43, 0xae, 0x25, 0x18, 0x93, 0x00, 0x08, 0x00, 0x43, 0xae, 0xff, 0xff, 0x42, 0x30, 0x0c, 0x00, 0x42, 0xae, 0x20, 0x00, 0x00, 0x10, 0x28, 0x16, 0x00, 0x70, 0x00, 0x12, 0x16, 0x00, 0x25, 0x18, 0x55, 0x00, 0x25, 0x10, 0x53, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x25, 0x10, 0x62, 0x00, 0x01, 0x00, 0x03, 0x24, 0x00, 0x00, 0x43, 0xae, 0x50, 0x79, 0x07, 0x0c, 0x04, 0x00, 0x42, 0xae, 0x08, 0x00, 0x42, 0xae, 0x01, 0x00, 0x02, 0x3c, 0x0c, 0x00, 0x50, 0xae, 0x12, 0x00, 0x00, 0x10, 0x01, 0x00, 0x42, 0x34, 0x00, 0x00, 0x43, 0xae, 0x00, 0x1a, 0x16, 0x00, 0x25, 0x10, 0x75, 0x00, 0x04, 0x00, 0x42, 0xae, 0x25, 0x10, 0x73, 0x00, 0x08, 0x00, 0x42, 0xae, 0xff, 0xff, 0x02, 0x24, 0x09, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x40, 0xae, 0x00, 0x00, 0x43, 0xae, 0x00, 0x1a, 0x16, 0x00, 0x25, 0x10, 0x75, 0x00, 0x04, 0x00, 0x42, 0xae, 0x25, 0x10, 0x73, 0x00, 0x08, 0x00, 0x42, 0xae, 0xff, 0xff, 0x02, 0x24, 0x0c, 0x00, 0x40, 0xae, 0x80, 0x00, 0xbf, 0x7b, 0x70, 0x00, 0xb7, 0x7b, 0x60, 0x00, 0xb6, 0x7b, 0x50, 0x00, 0xb5, 0x7b, 0x40, 0x00, 0xb4, 0x7b, 0x30, 0x00, 0xb3, 0x7b, 0x20, 0x00, 0xb2, 0x7b, 0x10, 0x00, 0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x90, 0x00, 0xbd, 0x27 },
                       696, hproc);
            
            Mem.PatchEx(AllowRitualFusionField,
                       new byte[972] { 0x02, 0x00, 0x19, 0x24, 0xc0, 0x81, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x43, 0x81, 0x02, 0x00, 0x28, 0x26, 0x60, 0x72, 0xc0, 0x81, 0x07, 0x0c, 0x28, 0x2e, 0x40, 0x72, 0x25, 0x00, 0x19, 0x12, 0x43, 0x19, 0x02, 0x00, 0x23, 0x00, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x80, 0x16, 0x28, 0x26, 0xa0, 0x72, 0x00, 0x12, 0x13, 0x00, 0x5f, 0x00, 0x04, 0x24, 0x25, 0x18, 0x52, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x54, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x24, 0xd3, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x22, 0xae, 0x28, 0x26, 0xa0, 0x72, 0x0c, 0x84, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x72, 0x28, 0x86, 0x40, 0x70, 0x28, 0x26, 0x60, 0x72, 0x0c, 0x84, 0x07, 0x0c, 0x28, 0x2e, 0x40, 0x72, 0x28, 0x26, 0x00, 0x72, 0x68, 0x25, 0x09, 0x0c, 0x28, 0x2e, 0x40, 0x70, 0x00, 0x1a, 0x15, 0x00, 0x64, 0x00, 0x05, 0x24, 0x25, 0x20, 0x74, 0x00, 0x00, 0x1a, 0x13, 0x00, 0x00, 0x00, 0x25, 0xae, 0x25, 0x18, 0x72, 0x00, 0x04, 0x00, 0x24, 0xae, 0x08, 0x00, 0x23, 0xae, 0x0c, 0x00, 0x22, 0xae, 0xbe, 0x00, 0x00, 0x10, 0x01, 0x00, 0x02, 0x24, 0x5b, 0x00, 0x00, 0x16, 0x02, 0x00, 0x02, 0x24, 0x02, 0x00, 0x02, 0x24, 0x57, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x80, 0x16, 0x28, 0x26, 0x60, 0x72, 0x00, 0x12, 0x13, 0x00, 0x5f, 0x00, 0x04, 0x24, 0x25, 0x18, 0x52, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x54, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x24, 0xac, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x22, 0xae, 0x28, 0x26, 0x60, 0x72, 0x0c, 0x84, 0x07, 0x0c, 0x28, 0x2e, 0x40, 0x72, 0x28, 0x26, 0xa0, 0x72, 0x28, 0x2e, 0x80, 0x72, 0xbc, 0x22, 0x09, 0x0c, 0x28, 0x36, 0x40, 0x70, 0xe7, 0x03, 0x05, 0x24, 0x28, 0x86, 0x40, 0x70, 0x0d, 0x00, 0x05, 0x16, 0x83, 0x17, 0x10, 0x00, 0x00, 0x12, 0x15, 0x00, 0x24, 0x00, 0x04, 0x24, 0x25, 0x18, 0x54, 0x00, 0x00, 0x12, 0x13, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x24, 0x96, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x25, 0xae, 0x83, 0x17, 0x10, 0x00, 0x01, 0x00, 0x43, 0x30, 0x01, 0x00, 0x02, 0x24, 0x10, 0x00, 0x62, 0x14, 0x19, 0x02, 0x02, 0x24, 0x00, 0x12, 0x13, 0x00, 0x25, 0x20, 0x52, 0x00, 0x2b, 0x00, 0x05, 0x24, 0x00, 0x12, 0x15, 0x00, 0x25, 0x18, 0x54, 0x00, 0x00, 0x00, 0x25, 0xae, 0x83, 0x13, 0x10, 0x00, 0x04, 0x00, 0x24, 0xae, 0xff, 0x3f, 0x42, 0x30, 0x08, 0x00, 0x23, 0xae, 0x0c, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x3c, 0x83, 0x00, 0x00, 0x10, 0x01, 0x00, 0x42, 0x34, 0x19, 0x02, 0x02, 0x24, 0x83, 0x1b, 0x10, 0x00, 0x12, 0x00, 0x62, 0x14, 0x00, 0x12, 0x15, 0x00, 0x25, 0x00, 0x03, 0x24, 0x00, 0x00, 0x23, 0xae, 0x00, 0x1a, 0x15, 0x00, 0x00, 0x12, 0x13, 0x00, 0x25, 0x18, 0x74, 0x00, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x28, 0x26, 0xa0, 0x72, 0x9c, 0x37, 0x09, 0x0c, 0x28, 0x2e, 0x80, 0x72, 0x00, 0x1c, 0x02, 0x00, 0xff, 0x3f, 0x02, 0x32, 0x25, 0x10, 0x43, 0x00, 0x0a, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x22, 0xae, 0x00, 0x12, 0x15, 0x00, 0x24, 0x00, 0x04, 0x24, 0x25, 0x18, 0x54, 0x00, 0x00, 0x12, 0x13, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x0c, 0x00, 0x30, 0xae, 0x01, 0x00, 0x02, 0x3c, 0x63, 0x00, 0x00, 0x10, 0x01, 0x00, 0x42, 0x34, 0x02, 0x00, 0x02, 0x24, 0x57, 0x00, 0x02, 0x16, 0x00, 0x12, 0x15, 0x00, 0x54, 0x00, 0x60, 0x14, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x40, 0x16, 0x28, 0x26, 0xa0, 0x72, 0x00, 0x12, 0x15, 0x00, 0x5f, 0x00, 0x04, 0x24, 0x25, 0x18, 0x54, 0x00, 0x00, 0x12, 0x13, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x24, 0x51, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x20, 0xae, 0x28, 0x26, 0xa0, 0x72, 0x0c, 0x84, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x72, 0x28, 0x26, 0x60, 0x72, 0x28, 0x2e, 0x40, 0x72, 0xbc, 0x22, 0x09, 0x0c, 0x28, 0x36, 0x40, 0x70, 0xe7, 0x03, 0x05, 0x24, 0x28, 0x86, 0x40, 0x70, 0x0d, 0x00, 0x05, 0x16, 0x83, 0x17, 0x10, 0x00, 0x00, 0x12, 0x15, 0x00, 0x24, 0x00, 0x04, 0x24, 0x25, 0x18, 0x54, 0x00, 0x00, 0x12, 0x13, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x24, 0x3b, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x25, 0xae, 0x83, 0x17, 0x10, 0x00, 0x01, 0x00, 0x43, 0x30, 0x01, 0x00, 0x02, 0x24, 0x0e, 0x00, 0x62, 0x54, 0x19, 0x02, 0x02, 0x24, 0x00, 0x1a, 0x15, 0x00, 0x25, 0x28, 0x74, 0x00, 0x2b, 0x00, 0x06, 0x24, 0x00, 0x1a, 0x13, 0x00, 0x25, 0x20, 0x72, 0x00, 0x00, 0x00, 0x26, 0xae, 0x83, 0x1b, 0x10, 0x00, 0x04, 0x00, 0x25, 0xae, 0xff, 0x3f, 0x63, 0x30, 0x08, 0x00, 0x24, 0xae, 0x2a, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x23, 0xae, 0x19, 0x02, 0x02, 0x24, 0x83, 0x1b, 0x10, 0x00, 0x12, 0x00, 0x62, 0x14, 0x00, 0x12, 0x15, 0x00, 0x25, 0x00, 0x03, 0x24, 0x00, 0x12, 0x15, 0x00, 0x25, 0x10, 0x54, 0x00, 0x00, 0x00, 0x23, 0xae, 0x04, 0x00, 0x22, 0xae, 0x00, 0x12, 0x13, 0x00, 0x25, 0x10, 0x52, 0x00, 0x08, 0x00, 0x22, 0xae, 0x28, 0x26, 0x60, 0x72, 0x9c, 0x37, 0x09, 0x0c, 0x28, 0x2e, 0x40, 0x72, 0x00, 0x1c, 0x02, 0x00, 0xff, 0x3f, 0x02, 0x32, 0x25, 0x10, 0x43, 0x00, 0x0a, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x22, 0xae, 0x00, 0x12, 0x15, 0x00, 0x24, 0x00, 0x04, 0x24, 0x25, 0x18, 0x54, 0x00, 0x00, 0x12, 0x13, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x0c, 0x00, 0x30, 0xae, 0x0b, 0x00, 0x00, 0x10, 0x01, 0x00, 0x02, 0x24, 0x00, 0x12, 0x15, 0x00, 0x5f, 0x00, 0x04, 0x24, 0x25, 0x18, 0x54, 0x00, 0x00, 0x12, 0x13, 0x00, 0x00, 0x00, 0x24, 0xae, 0x25, 0x10, 0x52, 0x00, 0x04, 0x00, 0x23, 0xae, 0x08, 0x00, 0x22, 0xae, 0x01, 0x00, 0x02, 0x24, 0x0c, 0x00, 0x20, 0xae, 0x60, 0x00, 0xbf, 0x7b, 0x50, 0x00, 0xb5, 0x7b, 0x40, 0x00, 0xb4, 0x7b, 0x30, 0x00, 0xb3, 0x7b, 0x20, 0x00, 0xb2, 0x7b, 0x10, 0x00, 0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x70, 0x00, 0xbd, 0x27 },
                       972, hproc);
        }

        static void RemoveSlotsRng()
        {
            
            //Assigns zero to the slots check for random field, when 0 this removes the random delay time after the button is clicked.
            //This is normally achieved when you destiny draw that game
            Mem.PatchEx(RemoveRngFromSlots, new byte[4] { 0x01, 0x00, 0x60, 0xa2 }, 4, hproc);
        }

        static void ChangeMakosTheme()
        {
            //TODO Fix Slot reel music Bug
            
            Mem.PatchEx(AddMakosThemeToMako,
                       new byte[488] { 0x0e, 0x00, 0x03, 0x24, 0x15, 0x00, 0xc3, 0x50, 0x23, 0x00, 0x06, 0x24, 0x14, 0x00, 0x03, 0x24, 0x15, 0x00, 0xc3, 0x50, 0x0c, 0x00, 0x06, 0x24, 0x13, 0x00, 0x03, 0x24, 0x0f, 0x00, 0xc3, 0x50, 0x0b, 0x00, 0x06, 0x24, 0x01, 0x00, 0x03, 0x24, 0x09, 0x00, 0xc3, 0x50, 0x0a, 0x00, 0x06, 0x24, 0x04, 0x00, 0xc0, 0x50, 0x07, 0x00, 0x06, 0x24, 0x10, 0x00, 0x00, 0x10, 0x16, 0x00, 0xc1, 0x28, 0x07, 0x00, 0x06, 0x24, 0x17, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x06, 0x24, 0x14, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x24, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x10, 0x2c, 0x00, 0x06, 0x24, 0x16, 0x00, 0xc1, 0x28, 0x09, 0x00, 0x20, 0x10, 0x28, 0x00, 0x06, 0x24, 0x04, 0x00, 0xe0, 0x10, 0x08, 0x00, 0x06, 0x24, 0x05, 0x00, 0x00, 0x10, 0x09, 0x00, 0x06, 0x24, 0x08, 0x00, 0x06, 0x24, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x06, 0x24, 0x4d, 0x00, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x62, 0x10, 0x02, 0x3c, 0xd3, 0x4d, 0x42, 0x34, 0x18, 0x00, 0x44, 0x00, 0xc2, 0x1f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x83, 0x11, 0x02, 0x00, 0x21, 0x18, 0x43, 0x00, 0x40, 0x11, 0x03, 0x00, 0x23, 0x10, 0x43, 0x00, 0x80, 0x10, 0x02, 0x00, 0x21, 0x10, 0x43, 0x00, 0xc0, 0x10, 0x02, 0x00, 0x21, 0x30, 0xc2, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x28, 0x26, 0xc0, 0x70, 0x3b, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe3, 0x8c, 0x0a, 0x00, 0x61, 0x2c, 0x1b, 0x00, 0x20, 0x10, 0xff, 0xff, 0x04, 0x24, 0x2c, 0x00, 0x06, 0x3c, 0xd0, 0xe6, 0xc6, 0x24, 0x80, 0x18, 0x03, 0x00, 0x21, 0x18, 0x66, 0x00, 0x00, 0x00, 0x63, 0x8c, 0x08, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x10, 0x0d, 0x00, 0x04, 0x24, 0x10, 0x00, 0x00, 0x10, 0x0e, 0x00, 0x04, 0x24, 0x0e, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x04, 0x24, 0x0c, 0x00, 0x00, 0x10, 0x10, 0x00, 0x04, 0x24, 0x0a, 0x00, 0x00, 0x10, 0x11, 0x00, 0x04, 0x24, 0x08, 0x00, 0x00, 0x10, 0x12, 0x00, 0x04, 0x24, 0x06, 0x00, 0x00, 0x10, 0x13, 0x00, 0x04, 0x24, 0x04, 0x00, 0x00, 0x10, 0x14, 0x00, 0x04, 0x24, 0x02, 0x00, 0x00, 0x10, 0x15, 0x00, 0x04, 0x24, 0x16, 0x00, 0x04, 0x24, 0x1b, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x05, 0x00, 0x04, 0x24, 0x13, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x05, 0x00, 0x04, 0x24, 0x0f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x29, 0x00, 0x04, 0x24, 0x0b, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x03, 0x00, 0x04, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x02, 0x00, 0x04, 0x24, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x5e, 0x08, 0x0c, 0x15, 0x00, 0x04, 0x24, 0x00, 0x00, 0xbf, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x10, 0x00, 0xbd, 0x27 },
                       488, hproc);
            Mem.PatchEx(BgmJumpFix1, new byte[4] { 0x1d, 0x00, 0xc3, 0x10 }, 4, hproc);
            Mem.PatchEx(BgmJumpFix2, new byte[4] { 0x8b, 0x00, 0x20, 0x10 }, 4, hproc);
            Mem.PatchEx(BgmJumpFix3, new byte[4] { 0x81, 0x00, 0x00, 0x10 }, 4, hproc);
            Mem.PatchEx(BgmJumpFix4, new byte[4] { 0x7c, 0x00, 0x00, 0x10 }, 4, hproc);
            Mem.PatchEx(ChangeBgmAddressTable1, new byte[40] { 0xa8, 0xac, 0x1a, 0x00, 0xb0, 0xac, 0x1a, 0x00, 0x98, 0xac, 0x1a, 0x00, 0x90, 0xac, 0x1a, 0x00, 0xa0, 0xac, 0x1a, 0x00, 0xc0, 0xac, 0x1a, 0x00, 0xc8, 0xac, 0x1a, 0x00, 0x88, 0xac, 0x1a, 0x00, 0xd0, 0xac, 0x1a, 0x00, 0xb8, 0xac, 0x1a, 0x00 },
                       40, hproc);
            Mem.PatchEx(ChangeBgmAddressTable2, new byte[56] { 0x44, 0xad, 0x1a, 0x00, 0x44, 0xad, 0x1a, 0x00, 0x44, 0xad, 0x1a, 0x00, 0x5c, 0xac, 0x1a, 0x00, 0xec, 0xac, 0x1a, 0x00, 0xfc, 0xac, 0x1a, 0x00, 0x0c, 0xad, 0x1a, 0x00, 0x1c, 0xad, 0x1a, 0x00, 0x2c, 0xad, 0x1a, 0x00, 0x44, 0xad, 0x1a, 0x00, 0x44, 0xad, 0x1a, 0x00, 0x44, 0xad, 0x1a, 0x00, 0x44, 0xad, 0x1a, 0x00, 0x3c, 0xad, 0x1a, 0x00 },
                       56, hproc);
        }

        static void ChangeTerrainStats(int amount)
        {
            byte[] posBytes = BitConverter.GetBytes(amount);
            byte[] negBytes = BitConverter.GetBytes(-amount);
            
            // D4(0th byte),FE(1st byte) = Negetive 300 change those bytes to change value of Negetive terrain
            // x2c(13th byte),x01 (14th byte) = postive 300 change those to change value of positive terrain
            Mem.PatchEx(NerfTerrain, new byte[16] {
                negBytes[0], negBytes[1], 0xb5, 0x26,
                0x01, 0x00, 0x03, 0x24,
                0x04, 0x00, 0x43, 0x50,
                posBytes[0], posBytes[1], 0xb5, 0x26 }, 16, hproc);
        }

        static void AddSlotRewards()
        {
            //TODO remove twin headed thunder in byte array make the drop down box typeable

            //Adds jump where it got copied from to its new location (0x0035fe00)
            Mem.PatchEx(AddSlotRewardsPtr, new byte[8] { 0x80, 0x7f, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00 }, 8, hproc);

            byte[] bytes = new byte[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x17, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x47, 0x45, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3e, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x03, 0x02, 0x24, 0xab, 0x45, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00 };
           
            int j = 0;
            for (int i = 24; j < 30; i+= 12)
            {
                var newBytes = BitConverter.GetBytes(SlotInputs[j]);
                j++;
                bytes[i] = newBytes[0];
                bytes[i+1] = newBytes[1];
            }
            j = 0;
            for (int i = 400; j < 30; i += 12)
            {
                var newBytes = BitConverter.GetBytes(SlotRewards[j]);
                j++;
                bytes[i] = newBytes[0];
                bytes[i + 1] = newBytes[1];
            }
            
            Mem.PatchEx(0x2035fe00,bytes , 768, hproc);


        }
        static void ChangeLPStatCap(int LpCap)
        {
            
            if (LpCap > 9999)
            {
                Allow5DigitsOnUI();
            }

            //Changes stat cap function
            byte[] bytes = BitConverter.GetBytes(LpCap);

            //Changes the if check from 9999 to 20k
            Mem.PatchEx(0x202508d4, new byte[4] { bytes[0], bytes[1], 0x81, 0x2c }, 4, hproc);
            Mem.PatchEx(0x202508e0, new byte[4] { bytes[0], bytes[1], 0x81, 0x2c }, 4, hproc);
            //changes the assignment to 20k
            Mem.PatchEx(0x202508ec, new byte[4] { bytes[0], bytes[1], 0x04, 0x24 }, 4, hproc);

            //Changes SzDuel_CalcLP function
            
            //Changes the if check from 9999 to 20k
            Mem.PatchEx(0x201df51c, new byte[4] { bytes[0], bytes[1], 0x41, 0x2c }, 4, hproc);
            //changes the assignment to 20k
            Mem.PatchEx(0x201df524, new byte[4] { bytes[0], bytes[1], 0x41, 0x2c }, 4, hproc);

        }

        static void Allow5DigitsOnUI()
        {
            

      
            //Allow 5 digits on UI
            Mem.PatchEx(MoreDigitsOnScreen, new byte[4] { 0x05, 0x00, 0x07, 0x24 }, 4, hproc);

            //Move player details box y pos
            Mem.PatchEx(0x201b13b4, new byte[4] { 0x14, 0x00, 0x04, 0x24 }, 4, hproc);

            //Move Player name tag
            Mem.PatchEx(0x201b1be4, new byte[4] { 0x94, 0x00, 0x03, 0x24 }, 4, hproc);



            //Move allignment (not needed anymore but could be useful in future)
            //Mem.PatchEx(0x201b1c64, "\x1c\x00\xf0\x26", 4);



            //offset white rose x pos left
            Mem.PatchEx(0x201b13f8, new byte[4] { 0x90, 0x01, 0x06, 0x24 }, 4, hproc);

            //Move Player Picture Right
            //Mem.PatchEx(0x201b1b34, "\x18\x00\xa3\x26", 4);
            Mem.PatchEx(0x201b1b2c, new byte[4] { 0x94, 0x00, 0x02, 0x24 }, 4, hproc);



            // make LP background box wider
            Mem.PatchEx(0x201b1b9c, new byte[4] { 0x0e, 0x00, 0x08, 0x24 }, 4, hproc);



            //Make UI Wider
            Mem.PatchEx(0x201b1afc, new byte[4] { 0x2a, 0x00, 0x0a, 0x24 }, 4, hproc);
            //Make UI Taller
            //Mem.PatchEx(0x201b1b00, "\x10\x00\x0b\x24", 4);



        }

        static void AIPassInsteadOfPressX()
        {
            
            //Patch Jump to 0036009c
            Mem.PatchEx(0x20276300, new byte[8] { 0x40, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00 }, 8, hproc);
            //Patch logic at jmp location
            Mem.PatchEx(improveAIInputDest, new byte[156] { 0x02, 0x00, 0x03, 0x92, 0x06, 0x00, 0x0b, 0x24, 0x21, 0x00, 0x6b, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x4c, 0x30, 0x04, 0x00, 0x0d, 0x96, 0xff, 0x00, 0xb8, 0x31, 0x23, 0x70, 0x98, 0x01, 0x1b, 0x00, 0xc0, 0x15, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x02, 0x00, 0x03, 0xc2, 0x0d, 0x00, 0x22, 0x70, 0x98, 0x01, 0x16, 0x00, 0xc0, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0d, 0x8e, 0x01, 0x00, 0x09, 0x24, 0x0f, 0x00, 0xa9, 0x11, 0x02, 0x00, 0x09, 0x24, 0x10, 0x00, 0x0d, 0x92, 0x0c, 0x00, 0xa9, 0x15, 0x00, 0x00, 0x00, 0x00, 0x50, 0x7d, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x4d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xad, 0x35, 0x57, 0x00, 0x4d, 0xa0, 0x60, 0x01, 0x28, 0x26, 0x20, 0x00, 0x09, 0x24, 0x00, 0x00, 0x09, 0xa5, 0xc1, 0xda, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x32, 0xff, 0x00, 0x83, 0x32, 0xc2, 0xd8, 0x09, 0x08 }, 156, hproc);
        }

        static void AllowAllCustomDuels()
        {
            
            //Allows Scrolling to new duels with L1 & R1
            Mem.PatchEx(0x201c7228, new byte[8] { 0x73, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00 }, 8, hproc);
            //Mem.PatchEx( 0x203601cc,"\x00\x00\x04\x24\x00\x00\x05\x24\x04\x00\x06\x24\x90\x0e\x08\x0c\x00\x00\x00\x00\xaa\x00\x01\x3c\x88\xc0\x38\x90\x07\x00\x40\x10\x00\x00\x00\x00\xff\xff\x18\x27\xaa\x00\x01\x3c\x88\xc0\x38\xa0\xff\xff\x04\x24\x5c\x17\x07\x0c\x00\x00\x00\x00\x00\x00\x04\x24\x08\x00\x06\x24\x90\x0e\x08\x0c\x00\x00\x00\x00\x0c\x00\x40\x10\x00\x00\x00\x00\x01\x00\x18\x27\xaa\x00\x01\x3c\x88\xc0\x38\xa0\xff\xff\x04\x24\x5c\x17\x07\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x06\x24\x08\x20\x00\x72\x90\x0e\x08\x0c\x00\x00\x00\x00\x8c\x1c\x07\x08\x00\x00\x00\x00",152);
            Mem.PatchEx(0x203601cc, new byte[308] { 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x05, 0x24, 0x04, 0x00, 0x06, 0x24, 0x90, 0x0e, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x38, 0x90, 0x10, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x27, 0x03, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x24, 0x2a, 0x70, 0x58, 0x00, 0x07, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x02, 0x24, 0x2a, 0x70, 0x02, 0x03, 0x03, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x24, 0x90, 0x0e, 0x08, 0x0c, 0x08, 0x00, 0x06, 0x24, 0x0f, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x27, 0x02, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x24, 0x04, 0x00, 0x02, 0x24, 0x2a, 0x70, 0x58, 0x00, 0x07, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x02, 0x24, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x70, 0x02, 0x03, 0x02, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x18, 0x24, 0x4e, 0x00, 0x02, 0x24, 0x1a, 0x00, 0x02, 0x03, 0x10, 0xc0, 0x00, 0x00, 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x38, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x24, 0x90, 0x0e, 0x08, 0x0c, 0x00, 0x00, 0x04, 0x24, 0x05, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x17, 0x07, 0x0c, 0xff, 0xff, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x24, 0x08, 0x20, 0x00, 0x72, 0x90, 0x0e, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x1c, 0x07, 0x08 }, 308, hproc);
            //Loads More All Duelists

            Mem.PatchEx(0x201c5db0, new byte[8] { 0xc4, 0x80, 0x0d, 0x08, 0x00, 0x00, 0x00, 0x00 }, 8, hproc);
            Mem.PatchEx(0x20360310, new byte[604] { 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x23, 0x80, 0x39, 0x00, 0x02, 0x24, 0x06, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x1b, 0x00, 0x05, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x24, 0x3a, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1c, 0x00, 0x05, 0x24, 0x02, 0x00, 0x12, 0x24, 0x3b, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1d, 0x00, 0x05, 0x24, 0x03, 0x00, 0x12, 0x24, 0x3c, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1e, 0x00, 0x05, 0x24, 0x04, 0x00, 0x12, 0x24, 0x3d, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1f, 0x00, 0x05, 0x24, 0x05, 0x00, 0x12, 0x24, 0x3e, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x20, 0x00, 0x05, 0x24, 0x06, 0x00, 0x12, 0x24, 0x3f, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x21, 0x00, 0x05, 0x24, 0x07, 0x00, 0x12, 0x24, 0x40, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x22, 0x00, 0x05, 0x24, 0x08, 0x00, 0x12, 0x24, 0x41, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x23, 0x00, 0x05, 0x24, 0x09, 0x00, 0x12, 0x24, 0x42, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x24, 0x00, 0x05, 0x24, 0x0a, 0x00, 0x12, 0x24, 0x43, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x25, 0x00, 0x05, 0x24, 0x0b, 0x00, 0x12, 0x24, 0x44, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x26, 0x00, 0x05, 0x24, 0x0c, 0x00, 0x12, 0x24, 0x45, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x27, 0x00, 0x05, 0x24, 0x0d, 0x00, 0x12, 0x24, 0x46, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x28, 0x00, 0x05, 0x24, 0x0e, 0x00, 0x12, 0x24, 0x47, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x29, 0x00, 0x05, 0x24, 0x0f, 0x00, 0x12, 0x24, 0x48, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2a, 0x00, 0x05, 0x24, 0x10, 0x00, 0x12, 0x24, 0x49, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2b, 0x00, 0x05, 0x24, 0x11, 0x00, 0x12, 0x24, 0x4a, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2c, 0x00, 0x05, 0x24, 0x12, 0x00, 0x12, 0x24, 0x4b, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2d, 0x00, 0x05, 0x24, 0x13, 0x00, 0x12, 0x24, 0x4c, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2e, 0x00, 0x05, 0x24, 0x14, 0x00, 0x12, 0x24, 0x4d, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2f, 0x00, 0x05, 0x24, 0x15, 0x00, 0x12, 0x24, 0x6e, 0x17, 0x07, 0x08 }, 604, hproc);

        }

        private static void UseCustomMaps()
        {

            byte[] bytes = new byte[49];
            


            for (int i = 0; i < form1.maps.Length; i++)
            {
                int mapOffset = (int)MapInfo;
                mapOffset += i * 49;

                DotrMap? map = form1.maps[i];
                for (int j = 0; j < map.tiles.Length; j++)
                {
                    bytes[j] = map.tiles[j].GetTerrainAsByte();
                  
                }
                Mem.PatchEx(mapOffset,bytes, 49, hproc);
                bytes =  new byte[49];
            }
           



        }
        public static void Mod()
        {
            
            byte[] comparisonBytes = new byte[startUpBytes.Length];
            byte[] hasLoadedByte = new byte[1] { 1};
            form1.Invoke(form1.updateMainlabel, "Current Status:\nWaiting for DOTR to load");
            
            while (true)
            {

                Mem.ReadProcessMemory(hproc, HasDotrStartedPtr, comparisonBytes, startUpBytes.Length, out _);
                Thread.Sleep(100);
                if (comparisonBytes.SequenceEqual(startUpBytes))
                {
                    Mem.ReadProcessMemory(hproc, hasLoadedModPtr, hasLoadedByte, 1, out _);
                    Thread.Sleep(300);
                    hasModLoaded = Convert.ToBoolean(hasLoadedByte[0]);
                    if (!hasModLoaded)
                    {
                        //MessageBox.Show($"HasLoadedByte {hasLoadedByte[0]} {hasModLoaded}");
                        break;
                    }
                    else
                    {   
                        form1.Invoke(form1.updateMainlabel, "Current Status:\nModded Already loaded.\nPlease Restart game");
                    }
                }
            }
            
             Mem.PatchEx(hasLoadedModPtr, new byte[] { 1 }, 1, hproc);
             
             form1.Invoke(form1.updateMainlabel, "Current Status:\nPatching");
            //Stops sound glitches most of the time
            char[] titleChars = pcsx2.MainWindowTitle.ToCharArray();
            char[] speedCharArray = new char[3] { titleChars[17], titleChars[18], titleChars[19]};
            int speed = Convert.ToInt32(new string(speedCharArray)) / 100;
            if (speed > 0)
            {
                Thread.Sleep(1000 / speed);
            }
            else
            {
                Thread.Sleep(1000);
            }
            
            Mem.SuspendProcess(pcsx2);
            modListSimple?.Invoke();
             if (delegateFunctions != null)
            {
                foreach (var kvp in delegateFunctions)
                {
                    kvp.Value.Invoke();
                }
            }
            
             Mem.ResumeProcess(pcsx2);
            
            Environment.Exit(Environment.ExitCode);
        }
    }
}
